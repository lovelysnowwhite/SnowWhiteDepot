/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tickets;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import tickets.property.Cinema;
import tickets.property.Hall;
import tickets.property.Movie;
import tickets.property.Session;
import tickets.property.Ticket;
import tickets.property.User;
import tickets.service.CinemaService;
import tickets.service.HallService;
import tickets.service.MovieService;
import tickets.service.SessionService;
import tickets.service.TicketService;
import tickets.service.UserService;

/**
 *
 * @author 94540
 */
public class MyTicketsUi extends JFrame{
    private JTable ticktb;
    private int row = -1;
    private List<Ticket> ticketlist;
    private UserService uo=new UserService();
    private MovieService mo = new MovieService();
    private TicketService ticketservice=new TicketService();
    private CinemaService cinemaservice=new CinemaService();
    private SessionService sessionservice=new SessionService();
    private HallService  hallservice=new HallService();
    private Font font = new Font("楷体", 0, 20);
    private User user;
    private JButton delTicket;
    /**
     * Creates new form MyTickets
     */
    public MyTicketsUi(User u) {
        user=u;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        delTicket=new JButton("退订");
		delTicket.setFont(font);
		delTicket.setBounds(1400, 40, 100, 50);
		delTicket.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                Ticket ticket;
			if(row==-1) {
				JOptionPane.showMessageDialog(null, "未选择影票");
			}else {
				ticket=ticketlist.get(row);
				if(ticketservice.delTicket(ticket.gettId())) {
				Session desession=sessionservice.querySessionById(ticket.getsId());
				desession.setRemain(desession.getRemain()+1);
				   if(sessionservice.updateSession(desession)) {
					JOptionPane.showMessageDialog(null, "退票成功");
					user.setBalance(user.getBalance()+desession.getPrice());
					uo.updateUser(user);
					ticketlist.remove(row);
					fillticktable(ticketlist);
				   }else {
					   JOptionPane.showMessageDialog(null, "退票失败");
				   }										
				}	
				else {
					JOptionPane.showMessageDialog(null, "退票失败");
				}
			}
            }
        });
        ticketlist=ticketservice.queryAllTicketuId(user.getUid());
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2000, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        
//        ticketlist=ticketservice.queryAllTicketuId(user.getUid());
        
        ticktb = new JTable() {
			public boolean isCellEditable( int row, int column) {
				return false;
			}

		};
		ticktb.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"影票编号", "用户名", "影院名称","影院地址","场厅名字","电影名称","开始时间","价格","座位号"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false,false,false,false,false,false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
		DefaultTableCellRenderer r = new DefaultTableCellRenderer();
		fillticktable(ticketlist);
		r.setHorizontalAlignment(JLabel.CENTER);
		ticktb.setDefaultRenderer(Object.class, r);
		ticktb.setRowHeight(90);
		ticktb.setFont(font);
		ticktb.getTableHeader().setFont(new Font("楷体", 1, 20));
		ticktb.getTableHeader().setBackground(Color.orange);
		ticktb.getTableHeader().setReorderingAllowed(false); // 不可交换顺序
		ticktb.getTableHeader().setResizingAllowed(false); // 不可拉动表格
		ticktb.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent me) {
				ticktablemousePressed(me);
			}
		});
		JScrollPane ticsPane = new JScrollPane(ticktb);
		this.add(delTicket);
		ticsPane.setBounds(0, 100, 2000, 500);
                this.add(ticsPane);
        pack();
    }
    public void ticktablemousePressed(MouseEvent me) {
		// TODO Auto-generated method stub
		Session csession;
		
		row = ticktb.getSelectedRow();
		if(row!=-1) {
			csession=sessionservice.querySessionById(ticketlist.get(row).getsId());
			
		}
	}
    
    public void fillticktable(List<Ticket> ticketlist2) {
		// TODO Auto-generated method stub
		DefaultTableModel dtm=(DefaultTableModel) ticktb.getModel();
		dtm.setRowCount(0); // 设置成0行
		int ticketRow = ticketlist.size();
		Session session;
		Hall hall;
		Cinema cinema;
		Movie tmovie;
		for (int i = 0; i < ticketRow; i++) {
			session=sessionservice.querySessionById(ticketlist.get(i).getsId());
			hall=hallservice.queryHallById(session.gethId());
			cinema=cinemaservice.queryCinemaById(session.getcId());
			tmovie=mo.queryMovieById(session.getmId());
			Vector v=new Vector();
			  v.add(ticketlist.get(i).gettId());
			  v.add(user.getuName());
			  v.add( cinema.getCname());
			  v.add(cinema.getCaddress());
			  v.add(hall.gethName());
			  v.add(tmovie.getmName());
			  v.add(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(session.getBeginTime()));
			  v.add(session.getPrice());
			  v.add(ticketlist.get(i).getSeat());
			  dtm.addRow(v);
		}
	}
}

